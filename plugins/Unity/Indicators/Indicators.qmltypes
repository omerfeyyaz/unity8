import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Unity.Indicators 0.1 plugins'

Module {
    Component {
        name: "ActionRootState"
        prototype: "RootStateObject"
        exports: ["Unity.Indicators/ActionRootState 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "actionGroup"; type: "QDBusActionGroup"; isPointer: true }
        Property { name: "actionName"; type: "string" }
    }
    Component {
        name: "ActionState"
        prototype: "QObject"
        exports: ["Unity.Indicators/ActionState 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ActionStates"
            values: {
                "Label": 0,
                "IconSource": 1,
                "AccessableName": 2,
                "Visible": 3
            }
        }
    }
    Component {
        name: "FlatMenuProxyModelRole"
        prototype: "QObject"
        exports: ["Unity.Indicators/FlatMenuProxyModelRole 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "Action": 1,
                "Label": 2,
                "Extra": 3,
                "Depth": 4,
                "hasSection": 5,
                "hasSubMenu": 6
            }
        }
    }
    Component {
        name: "IndicatorsManager"
        prototype: "QObject"
        exports: ["Unity.Indicators/IndicatorsManager 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "loaded"; type: "bool"; isReadonly: true }
        Property { name: "profile"; type: "string" }
        Signal {
            name: "loadedChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "profileChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "indicatorLoaded"
            Parameter { name: "indicator_name"; type: "string" }
        }
        Signal {
            name: "indicatorAboutToBeUnloaded"
            Parameter { name: "indicator_name"; type: "string" }
        }
        Method { name: "load" }
        Method { name: "unload" }
    }
    Component {
        name: "IndicatorsModel"
        prototype: "QAbstractListModel"
        exports: ["Unity.Indicators/IndicatorsModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "profile"; type: "string" }
        Signal {
            name: "indicatorDataChanged"
            Parameter { name: "data"; type: "QVariant" }
        }
        Method { name: "load" }
        Method { name: "unload" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
    }
    Component {
        name: "IndicatorsModelRole"
        prototype: "QObject"
        exports: ["Unity.Indicators/IndicatorsModelRole 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "Identifier": 0,
                "Position": 1,
                "IndicatorProperties": 2
            }
        }
    }
    Component {
        name: "MenuContentActivator"
        prototype: "QObject"
        exports: ["Unity.Indicators/MenuContentActivator 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "baseIndex"; type: "int" }
        Property { name: "running"; type: "bool" }
        Property { name: "count"; type: "int" }
        Property { name: "content"; type: "MenuContentState"; isList: true; isReadonly: true }
        Signal {
            name: "baseIndexChanged"
            Parameter { name: "baseIndex"; type: "int" }
        }
        Signal {
            name: "deltaChanged"
            Parameter { name: "delta"; type: "int" }
        }
        Signal {
            name: "runningChanged"
            Parameter { name: "running"; type: "bool" }
        }
        Signal {
            name: "countChanged"
            Parameter { name: "count"; type: "int" }
        }
        Method { name: "restart" }
        Method { name: "stop" }
        Method { name: "clear" }
        Method {
            name: "isMenuContentActive"
            type: "bool"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "MenuContentState"
        prototype: "QObject"
        exports: ["Unity.Indicators/MenuContentState 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "active"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "ModelActionRootState"
        prototype: "RootStateObject"
        exports: ["Unity.Indicators/ModelActionRootState 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "menu"; type: "UnityMenuModel"; isPointer: true }
        Signal { name: "indexChanged" }
    }
    Component {
        name: "ModelPrinter"
        prototype: "QObject"
        exports: ["Unity.Indicators/ModelPrinter 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "model"; type: "UnityMenuModel"; isPointer: true }
        Property { name: "text"; type: "string"; isReadonly: true }
        Method { name: "text"; type: "string" }
    }
    Component {
        name: "NetworkActionState"
        prototype: "QObject"
        exports: ["Unity.Indicators/NetworkActionState 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "NetworkActionStates"
            values: {
                "Connection": 1,
                "SignalStrength": 2
            }
        }
    }
    Component {
        name: "NetworkConnection"
        prototype: "QObject"
        exports: ["Unity.Indicators/NetworkConnection 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "NetworkConnectionStates"
            values: {
                "Initial": 0,
                "Activating": 1,
                "Activated": 2,
                "Deactivating": 3
            }
        }
    }
    Component {
        name: "RootStateObject"
        prototype: "QObject"
        Property { name: "valid"; type: "bool"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "leftLabel"; type: "string"; isReadonly: true }
        Property { name: "rightLabel"; type: "string"; isReadonly: true }
        Property { name: "icons"; type: "QStringList"; isReadonly: true }
        Property { name: "accessibleName"; type: "string"; isReadonly: true }
        Property { name: "indicatorVisible"; type: "bool"; isReadonly: true }
        Signal { name: "updated" }
    }
    Component {
        name: "SharedUnityMenuModel"
        prototype: "QObject"
        exports: ["Unity.Indicators/SharedUnityMenuModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "busName"; type: "QByteArray" }
        Property { name: "menuObjectPath"; type: "QByteArray" }
        Property { name: "actions"; type: "QVariantMap" }
        Property { name: "model"; type: "UnityMenuModel"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "UnityMenuModelCache"
        prototype: "QObject"
        exports: ["Unity.Indicators/UnityMenuModelCache 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "path"; type: "QByteArray" }
        }
    }
    Component {
        name: "UnityMenuModelStack"
        prototype: "QObject"
        exports: ["Unity.Indicators/UnityMenuModelStack 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "head"; type: "UnityMenuModel"; isPointer: true }
        Property { name: "tail"; type: "UnityMenuModel"; isReadonly: true; isPointer: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal {
            name: "headChanged"
            Parameter { name: "head"; type: "UnityMenuModel"; isPointer: true }
        }
        Signal {
            name: "tailChanged"
            Parameter { name: "tail"; type: "UnityMenuModel"; isPointer: true }
        }
        Signal {
            name: "countChanged"
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "push"
            Parameter { name: "model"; type: "UnityMenuModel"; isPointer: true }
            Parameter { name: "menuIndex"; type: "int" }
        }
        Method { name: "pop"; type: "UnityMenuModel*" }
    }
}
