import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Utils 0.1 plugins'

Module {
    Component {
        name: "EasingCurve"
        prototype: "QObject"
        exports: ["Utils/EasingCurve 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "type"; type: "QEasingCurve::Type" }
        Property { name: "period"; type: "double" }
        Property { name: "progress"; type: "double" }
        Property { name: "value"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
    }
    Component { name: "QIdentityProxyModel"; prototype: "QAbstractProxyModel" }
    Component {
        name: "QLimitProxyModelQML"
        prototype: "QIdentityProxyModel"
        exports: ["Utils/LimitProxyModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "limit"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "totalCountChanged" }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        name: "RelativeTimeFormatter"
        prototype: "TimeFormatter"
        exports: ["Utils/RelativeTimeFormatter 0.1"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "TimeFormatter"
        prototype: "QObject"
        exports: ["Utils/GDateTimeFormatter 0.1", "Utils/TimeFormatter 0.1"]
        exportMetaObjectRevisions: [0, 0]
        Property { name: "format"; type: "string" }
        Property { name: "timeString"; type: "string"; isReadonly: true }
        Property { name: "time"; type: "qlonglong" }
        Signal {
            name: "formatChanged"
            Parameter { name: "format"; type: "string" }
        }
        Signal {
            name: "timeStringChanged"
            Parameter { name: "timeString"; type: "string" }
        }
        Signal {
            name: "timeChanged"
            Parameter { name: "time"; type: "qlonglong" }
        }
    }
    Component {
        name: "UnityMenuModelPaths"
        prototype: "QObject"
        exports: ["Utils/UnityMenuModelPaths 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QVariant" }
        Property { name: "busName"; type: "QByteArray"; isReadonly: true }
        Property { name: "actions"; type: "QVariantMap"; isReadonly: true }
        Property { name: "menuObjectPath"; type: "QByteArray"; isReadonly: true }
        Property { name: "busNameHint"; type: "QByteArray" }
        Property { name: "actionsHint"; type: "QByteArray" }
        Property { name: "menuObjectPathHint"; type: "QByteArray" }
    }
    Component {
        name: "UnitySortFilterProxyModelQML"
        prototype: "QSortFilterProxyModel"
        exports: ["Utils/UnitySortFilterProxyModel 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "model"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "totalCount"; type: "int"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "invertMatch"; type: "bool" }
        Signal {
            name: "invertMatchChanged"
            Parameter { type: "bool" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method { name: "count"; type: "int" }
        Method {
            name: "findFirst"
            type: "int"
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "mapRowToSource"
            type: "int"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "mapFromSource"
            type: "int"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "mapToSource"
            type: "int"
            Parameter { name: "row"; type: "int" }
        }
    }
    Component {
        name: "WindowKeysFilter"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Utils/WindowKeysFilter 0.1"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "WindowStateStorage"
        prototype: "QObject"
        exports: ["Utils/WindowStateStorage 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "saveGeometry"
            Parameter { name: "windowId"; type: "string" }
            Parameter { name: "rect"; type: "QRect" }
        }
        Method {
            name: "getGeometry"
            type: "QRect"
            Parameter { name: "windowId"; type: "string" }
            Parameter { name: "defaultValue"; type: "QRect" }
        }
    }
}
