import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Unity 0.2 tests/mocks'

Module {
    Component {
        name: "Categories"
        prototype: "unity::shell::scopes::CategoriesInterface"
        Method {
            name: "addSpecialCategory"
            Parameter { name: "categoryId"; type: "string" }
            Parameter { name: "name"; type: "string" }
            Parameter { name: "icon"; type: "string" }
            Parameter { name: "rawTemplate"; type: "string" }
            Parameter { name: "countObject"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "overrideCategoryJson"
            type: "bool"
            Parameter { name: "categoryId"; type: "string" }
            Parameter { name: "json"; type: "string" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setCount"
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "resultModel"
            type: "ResultsModel*"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "setLayout"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "layout"; type: "string" }
        }
        Method {
            name: "setHeaderLink"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "headerLink"; type: "string" }
        }
    }
    Component {
        name: "PreviewModel"
        prototype: "unity::shell::scopes::PreviewModelInterface"
        exports: ["Unity/FakePreviewModel 0.2"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "setLoaded"
            Parameter { type: "bool" }
        }
    }
    Component {
        name: "PreviewStack"
        prototype: "unity::shell::scopes::PreviewStackInterface"
        exports: ["Unity/PreviewStack 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Method {
            name: "getPreviewModel"
            type: "unity::shell::scopes::PreviewModelInterface*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "PreviewWidgetModel"
        prototype: "unity::shell::scopes::PreviewWidgetModelInterface"
        exports: ["Unity/PreviewWidgetModel 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "ResultsModel"
        prototype: "unity::shell::scopes::ResultsModelInterface"
        exports: ["Unity/FakeResultsModel 0.2", "Unity/ResultsModel 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0, 0]
        Method {
            name: "setResultCount"
            Parameter { name: "result_count"; type: "int" }
        }
    }
    Component {
        name: "Scope"
        prototype: "unity::shell::scopes::ScopeInterface"
        exports: ["Unity/MockScope 0.2"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "performQuery"
            Parameter { name: "query"; type: "string" }
        }
        Signal { name: "refreshed" }
        Method {
            name: "setId"
            Parameter { name: "id"; type: "string" }
        }
        Method {
            name: "setName"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "setSearchInProgress"
            Parameter { name: "inProg"; type: "bool" }
        }
        Method {
            name: "activate"
            Parameter { name: "result"; type: "QVariant" }
        }
        Method {
            name: "preview"
            type: "PreviewStack*"
            Parameter { name: "result"; type: "QVariant" }
        }
        Method { name: "cancelActivation" }
        Method {
            name: "closeScope"
            Parameter { name: "scope"; type: "unity::shell::scopes::ScopeInterface"; isPointer: true }
        }
        Method {
            name: "getNavigation"
            type: "unity::shell::scopes::NavigationInterface*"
            Parameter { name: "navigationId"; type: "string" }
        }
        Method {
            name: "getAltNavigation"
            type: "unity::shell::scopes::NavigationInterface*"
            Parameter { name: "altNavigationId"; type: "string" }
        }
        Method {
            name: "setNavigationState"
            Parameter { name: "navigationId"; type: "string" }
            Parameter { name: "isAltNavigation"; type: "bool" }
        }
        Method { name: "refresh" }
    }
    Component {
        name: "Scopes"
        prototype: "unity::shell::scopes::ScopesInterface"
        exports: ["Unity/Scopes 0.2"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "getScope"
            type: "unity::shell::scopes::ScopeInterface*"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "getScope"
            type: "unity::shell::scopes::ScopeInterface*"
            Parameter { name: "scope_id"; type: "string" }
        }
        Method {
            name: "addScope"
            Parameter { name: "scope"; type: "Scope"; isPointer: true }
        }
        Method { name: "clear" }
        Method { name: "clearFavorites" }
        Method { name: "load" }
        Method {
            name: "setFavorite"
            Parameter { name: "scopeId"; type: "string" }
            Parameter { name: "favorite"; type: "bool" }
        }
        Method {
            name: "moveFavoriteTo"
            Parameter { name: "scopeId"; type: "string" }
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "getScopeFromAll"
            type: "Scope*"
            Parameter { name: "scope_id"; type: "string" }
        }
    }
    Component { name: "SettingsModel"; prototype: "unity::shell::scopes::SettingsModelInterface" }
    Component {
        name: "unity::shell::scopes::CategoriesInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/Categories 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleCategoryId": 0,
                "RoleName": 1,
                "RoleIcon": 2,
                "RoleRawRendererTemplate": 3,
                "RoleRenderer": 4,
                "RoleComponents": 5,
                "RoleHeaderLink": 6,
                "RoleResults": 7,
                "RoleCount": 8
            }
        }
        Method {
            name: "overrideCategoryJson"
            type: "bool"
            Parameter { name: "categoryId"; type: "string" }
            Parameter { name: "json"; type: "string" }
        }
        Method {
            name: "addSpecialCategory"
            Parameter { name: "categoryId"; type: "string" }
            Parameter { name: "name"; type: "string" }
            Parameter { name: "icon"; type: "string" }
            Parameter { name: "rawTemplate"; type: "string" }
            Parameter { name: "countObject"; type: "QObject"; isPointer: true }
        }
    }
    Component {
        name: "unity::shell::scopes::NavigationInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/Navigation 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleNavigationId": 0,
                "RoleLabel": 1,
                "RoleHasChildren": 2,
                "RoleIsActive": 3
            }
        }
        Property { name: "navigationId"; type: "string"; isReadonly: true }
        Property { name: "label"; type: "string"; isReadonly: true }
        Property { name: "allLabel"; type: "string"; isReadonly: true }
        Property { name: "parentNavigationId"; type: "string"; isReadonly: true }
        Property { name: "parentLabel"; type: "string"; isReadonly: true }
        Property { name: "loaded"; type: "bool"; isReadonly: true }
        Property { name: "isRoot"; type: "bool"; isReadonly: true }
        Property { name: "hidden"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "unity::shell::scopes::PreviewModelInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/PreviewModel 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleColumnModel": 0
            }
        }
        Property { name: "widgetColumnCount"; type: "int" }
        Property { name: "loaded"; type: "bool"; isReadonly: true }
        Property { name: "processingAction"; type: "bool"; isReadonly: true }
        Signal {
            name: "triggered"
            Parameter { type: "string" }
            Parameter { type: "string" }
            Parameter { type: "QVariantMap" }
        }
    }
    Component {
        name: "unity::shell::scopes::PreviewStackInterface"
        prototype: "QAbstractListModel"
        Enum {
            name: "Roles"
            values: {
                "RolePreviewModel": 0
            }
        }
        Property { name: "widgetColumnCount"; type: "int" }
        Method {
            name: "getPreviewModel"
            type: "unity::shell::scopes::PreviewModelInterface*"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "unity::shell::scopes::PreviewWidgetModelInterface"
        prototype: "QAbstractListModel"
        Enum {
            name: "Roles"
            values: {
                "RoleWidgetId": 0,
                "RoleType": 1,
                "RoleProperties": 2
            }
        }
    }
    Component {
        name: "unity::shell::scopes::ResultsModelInterface"
        prototype: "QAbstractListModel"
        Enum {
            name: "Roles"
            values: {
                "RoleUri": 0,
                "RoleCategoryId": 1,
                "RoleDndUri": 2,
                "RoleResult": 3,
                "RoleTitle": 4,
                "RoleArt": 5,
                "RoleSubtitle": 6,
                "RoleMascot": 7,
                "RoleEmblem": 8,
                "RoleSummary": 9,
                "RoleAttributes": 10,
                "RoleBackground": 11,
                "RoleOverlayColor": 12
            }
        }
        Property { name: "categoryId"; type: "string" }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
    Component {
        name: "unity::shell::scopes::ScopeInterface"
        prototype: "QObject"
        exports: ["Unity/Scope 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Okay": 0,
                "NoInternet": 1,
                "NoLocationData": 2,
                "Unknown": 3
            }
        }
        Property { name: "id"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "iconHint"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "searchHint"; type: "string"; isReadonly: true }
        Property { name: "searchInProgress"; type: "bool"; isReadonly: true }
        Property { name: "favorite"; type: "bool" }
        Property { name: "shortcut"; type: "string"; isReadonly: true }
        Property {
            name: "categories"
            type: "unity::shell::scopes::CategoriesInterface"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "settings"
            type: "unity::shell::scopes::SettingsModelInterface"
            isReadonly: true
            isPointer: true
        }
        Property { name: "searchQuery"; type: "string" }
        Property { name: "noResultsHint"; type: "string" }
        Property { name: "formFactor"; type: "string" }
        Property { name: "isActive"; type: "bool" }
        Property { name: "currentNavigationId"; type: "string"; isReadonly: true }
        Property { name: "hasNavigation"; type: "bool"; isReadonly: true }
        Property { name: "currentAltNavigationId"; type: "string"; isReadonly: true }
        Property { name: "hasAltNavigation"; type: "bool"; isReadonly: true }
        Property { name: "customizations"; type: "QVariantMap"; isReadonly: true }
        Property {
            name: "status"
            type: "unity::shell::scopes::ScopeInterface::Status"
            isReadonly: true
        }
        Signal { name: "detailsChanged" }
        Signal { name: "showDash" }
        Signal { name: "hideDash" }
        Signal {
            name: "gotoUri"
            Parameter { name: "uri"; type: "string" }
        }
        Signal {
            name: "previewRequested"
            Parameter { name: "result"; type: "QVariant" }
        }
        Signal {
            name: "gotoScope"
            Parameter { name: "scopeId"; type: "string" }
        }
        Signal {
            name: "openScope"
            Parameter { name: "scope"; type: "unity::shell::scopes::ScopeInterface"; isPointer: true }
        }
        Method {
            name: "activate"
            Parameter { name: "result"; type: "QVariant" }
        }
        Method {
            name: "preview"
            type: "unity::shell::scopes::PreviewStackInterface*"
            Parameter { name: "result"; type: "QVariant" }
        }
        Method { name: "cancelActivation" }
        Method {
            name: "closeScope"
            Parameter { name: "scope"; type: "unity::shell::scopes::ScopeInterface"; isPointer: true }
        }
        Method {
            name: "getNavigation"
            type: "unity::shell::scopes::NavigationInterface*"
            Parameter { name: "navigationId"; type: "string" }
        }
        Method {
            name: "getAltNavigation"
            type: "unity::shell::scopes::NavigationInterface*"
            Parameter { name: "altNavigationId"; type: "string" }
        }
        Method {
            name: "setNavigationState"
            Parameter { name: "navId"; type: "string" }
            Parameter { name: "altNavigation"; type: "bool" }
        }
        Method {
            name: "performQuery"
            Parameter { name: "cannedQuery"; type: "string" }
        }
        Method { name: "refresh" }
    }
    Component {
        name: "unity::shell::scopes::ScopesInterface"
        prototype: "QAbstractListModel"
        Enum {
            name: "Roles"
            values: {
                "RoleScope": 0,
                "RoleId": 1,
                "RoleTitle": 2
            }
        }
        Property { name: "loaded"; type: "bool"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property {
            name: "overviewScope"
            type: "unity::shell::scopes::ScopeInterface"
            isReadonly: true
            isPointer: true
        }
        Method {
            name: "getScope"
            type: "unity::shell::scopes::ScopeInterface*"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "getScope"
            type: "unity::shell::scopes::ScopeInterface*"
            Parameter { name: "scopeId"; type: "string" }
        }
        Method {
            name: "setFavorite"
            Parameter { name: "scopeId"; type: "string" }
            Parameter { name: "favorite"; type: "bool" }
        }
        Method {
            name: "moveFavoriteTo"
            Parameter { name: "scopeId"; type: "string" }
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "unity::shell::scopes::SettingsModelInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity/SettingsModel 0.2"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleSettingId": 0,
                "RoleDisplayName": 1,
                "RoleType": 2,
                "RoleProperties": 3,
                "RoleValue": 4
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
    }
}
