import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -notrelocatable Unity.Application 0.1 tests/mocks'

Module {
    Component {
        name: "ApplicationInfo"
        prototype: "unity::shell::application::ApplicationInfoInterface"
        exports: ["Unity.Application/ApplicationInfo 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "fullscreen"; type: "bool" }
        Property { name: "session"; type: "Session"; isReadonly: true; isPointer: true }
        Property { name: "manualSurfaceCreation"; type: "bool" }
        Signal {
            name: "sessionChanged"
            Parameter { type: "Session"; isPointer: true }
        }
        Signal {
            name: "fullscreenChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "manualSurfaceCreationChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Method { name: "createSession" }
        Method {
            name: "setState"
            Parameter { name: "value"; type: "State" }
        }
    }
    Component {
        name: "ApplicationManager"
        prototype: "unity::shell::application::ApplicationManagerInterface"
        exports: ["Unity.Application/ApplicationManager 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Role"
            values: {
                "Dash": 0,
                "Default": 1,
                "Indicators": 2,
                "Notifications": 3,
                "Greeter": 4,
                "Launcher": 5,
                "OnScreenKeyboard": 6,
                "ShutdownDialog": 7
            }
        }
        Enum {
            name: "StageHint"
            values: {
                "MainStage": 0,
                "IntegrationStage": 1,
                "ShareStage": 2,
                "ContentPickingStage": 3,
                "SideStage": 4,
                "ConfigurationStage": 5
            }
        }
        Enum {
            name: "FormFactorHint"
            values: {
                "DesktopFormFactor": 0,
                "PhoneFormFactor": 1,
                "TabletFormFactor": 2
            }
        }
        Enum {
            name: "FavoriteApplication"
            values: {
                "CameraApplication": 0,
                "GalleryApplication": 1,
                "BrowserApplication": 2,
                "ShareApplication": 3,
                "PhoneApplication": 4,
                "DialerApplication": 5,
                "MessagingApplication": 6,
                "AddressbookApplication": 7
            }
        }
        Enum {
            name: "ExecFlags"
            values: {
                "NoFlag": 0,
                "ForceMainStage": 1
            }
        }
        Property { name: "empty"; type: "bool"; isReadonly: true }
        Property { name: "sideStageWidth"; type: "int"; isReadonly: true }
        Property { name: "stageHint"; type: "StageHint"; isReadonly: true }
        Property { name: "formFactorHint"; type: "FormFactorHint"; isReadonly: true }
        Property { name: "fake"; type: "bool"; isReadonly: true }
        Signal {
            name: "focusRequested"
            Parameter { name: "favoriteApplication"; type: "FavoriteApplication" }
        }
        Signal {
            name: "focusRequested"
            Parameter { name: "appId"; type: "string" }
        }
        Signal {
            name: "emptyChanged"
            Parameter { name: "empty"; type: "bool" }
        }
        Method {
            name: "get"
            type: "ApplicationInfo*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "findApplication"
            type: "ApplicationInfo*"
            Parameter { name: "appId"; type: "string" }
        }
        Method {
            name: "move"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "to"; type: "int" }
        }
        Method {
            name: "requestFocusApplication"
            type: "bool"
            Parameter { name: "appId"; type: "string" }
        }
        Method {
            name: "focusApplication"
            type: "bool"
            Parameter { name: "appId"; type: "string" }
        }
        Method { name: "unfocusCurrentApplication" }
        Method {
            name: "startApplication"
            type: "ApplicationInfo*"
            Parameter { name: "appId"; type: "string" }
            Parameter { name: "arguments"; type: "QStringList" }
        }
        Method {
            name: "startApplication"
            type: "ApplicationInfo*"
            Parameter { name: "appId"; type: "string" }
        }
        Method {
            name: "startApplication"
            type: "ApplicationInfo*"
            Parameter { name: "appId"; type: "string" }
            Parameter { name: "flags"; type: "ExecFlags" }
            Parameter { name: "arguments"; type: "QStringList" }
        }
        Method {
            name: "startApplication"
            type: "ApplicationInfo*"
            Parameter { name: "appId"; type: "string" }
            Parameter { name: "flags"; type: "ExecFlags" }
        }
        Method {
            name: "stopApplication"
            type: "bool"
            Parameter { name: "appId"; type: "string" }
        }
        Method { name: "availableApplications"; type: "QStringList" }
        Method {
            name: "add"
            type: "ApplicationInfo*"
            Parameter { name: "appId"; type: "string" }
        }
    }
    Component {
        name: "ApplicationTestInterface"
        prototype: "QDBusAbstractAdaptor"
        exports: ["Unity.Application/ApplicationTest 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "addChildSession"
            type: "uint"
            Parameter { name: "appId"; type: "string" }
            Parameter { name: "existingSessionId"; type: "uint" }
            Parameter { name: "surfaceImage"; type: "string" }
        }
        Method {
            name: "removeSession"
            Parameter { name: "sessionId"; type: "uint" }
        }
        Method {
            name: "addChildSession"
            type: "Session*"
            Parameter { name: "existingSession"; type: "Session"; isPointer: true }
            Parameter { name: "surfaceImage"; type: "string" }
        }
        Method {
            name: "removeSession"
            Parameter { name: "existingSession"; type: "Session"; isPointer: true }
        }
        Method {
            name: "removeSurface"
            Parameter { name: "existingSurface"; type: "MirSurfaceItem"; isPointer: true }
        }
    }
    Component {
        name: "MirSurfaceItem"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Unity.Application/MirSurfaceItem 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Type"
            values: {
                "Normal": 0,
                "Utility": 1,
                "Dialog": 2,
                "Overlay": 3,
                "Freestyle": 4,
                "Popover": 5,
                "InputMethod": 6
            }
        }
        Enum {
            name: "State"
            values: {
                "Unknown": 0,
                "Restored": 1,
                "Minimized": 2,
                "Maximized": 3,
                "VertMaximized": 4,
                "Fullscreen": 5
            }
        }
        Property { name: "type"; type: "Type"; isReadonly: true }
        Property { name: "state"; type: "State"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "live"; type: "bool"; isReadonly: true }
        Property { name: "orientation"; type: "Qt::ScreenOrientation" }
        Property { name: "touchPressCount"; type: "int" }
        Property { name: "touchReleaseCount"; type: "int" }
        Signal {
            name: "typeChanged"
            Parameter { type: "Type" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "State" }
        }
        Signal {
            name: "liveChanged"
            Parameter { name: "live"; type: "bool" }
        }
        Signal {
            name: "touchPressCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal {
            name: "touchReleaseCountChanged"
            Parameter { name: "count"; type: "int" }
        }
        Signal { name: "inputMethodRequested" }
        Signal { name: "inputMethodDismissed" }
        Signal { name: "deregister" }
        Method {
            name: "setState"
            Parameter { name: "newState"; type: "State" }
        }
        Method { name: "release" }
    }
    Component { name: "QDBusAbstractAdaptor"; prototype: "QObject" }
    Component {
        name: "Session"
        prototype: "QObject"
        exports: ["Unity.Application/Session 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "surface"; type: "MirSurfaceItem"; isReadonly: true; isPointer: true }
        Property { name: "application"; type: "ApplicationInfo"; isReadonly: true; isPointer: true }
        Property { name: "parentSession"; type: "Session"; isReadonly: true; isPointer: true }
        Property { name: "childSessions"; type: "SessionModel"; isReadonly: true; isPointer: true }
        Property { name: "live"; type: "bool"; isReadonly: true }
        Signal {
            name: "applicationChanged"
            Parameter { type: "ApplicationInfo"; isPointer: true }
        }
        Signal {
            name: "surfaceChanged"
            Parameter { type: "MirSurfaceItem"; isPointer: true }
        }
        Signal {
            name: "parentSessionChanged"
            Parameter { type: "Session"; isPointer: true }
        }
        Signal {
            name: "liveChanged"
            Parameter { name: "live"; type: "bool" }
        }
        Signal { name: "deregister" }
        Method { name: "createSurface" }
        Method { name: "release" }
        Method {
            name: "addChildSession"
            Parameter { name: "session"; type: "Session"; isPointer: true }
        }
        Method {
            name: "removeChildSession"
            Parameter { name: "session"; type: "Session"; isPointer: true }
        }
    }
    Component {
        name: "SessionManager"
        prototype: "QObject"
        exports: ["Unity.Application/SessionManager 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Signal {
            name: "sessionStarting"
            Parameter { name: "session"; type: "Session"; isPointer: true }
        }
        Signal {
            name: "sessionStopping"
            Parameter { name: "session"; type: "Session"; isPointer: true }
        }
        Method {
            name: "createSession"
            type: "Session*"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "screenshot"; type: "QUrl" }
        }
    }
    Component {
        name: "SurfaceManager"
        prototype: "QObject"
        exports: ["Unity.Application/SurfaceManager 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Signal { name: "countChanged" }
        Signal {
            name: "surfaceCreated"
            Parameter { name: "surface"; type: "MirSurfaceItem"; isPointer: true }
        }
        Signal {
            name: "surfaceDestroyed"
            Parameter { name: "surface"; type: "MirSurfaceItem"; isPointer: true }
        }
        Method {
            name: "createSurface"
            type: "MirSurfaceItem*"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "type"; type: "MirSurfaceItem::Type" }
            Parameter { name: "state"; type: "MirSurfaceItem::State" }
            Parameter { name: "screenshot"; type: "QUrl" }
        }
        Method { name: "inputMethodSurface"; type: "MirSurfaceItem*" }
    }
    Component {
        name: "UbuntuKeyboardInfo"
        prototype: "QObject"
        exports: ["Unity.Application/UbuntuKeyboardInfo 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double"; isReadonly: true }
        Property { name: "y"; type: "double"; isReadonly: true }
        Property { name: "width"; type: "double"; isReadonly: true }
        Property { name: "height"; type: "double"; isReadonly: true }
        Signal {
            name: "xChanged"
            Parameter { name: "x"; type: "double" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "y"; type: "double" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "width"; type: "double" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "height"; type: "double" }
        }
    }
    Component {
        name: "unity::shell::application::ApplicationInfoInterface"
        prototype: "QObject"
        exports: ["Unity.Application/ApplicationInfoInterface 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Stage"
            values: {
                "MainStage": 0,
                "SideStage": 1
            }
        }
        Enum {
            name: "State"
            values: {
                "Starting": 0,
                "Running": 1,
                "Suspended": 2,
                "Stopped": 3
            }
        }
        Property { name: "appId"; type: "string"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "comment"; type: "string"; isReadonly: true }
        Property { name: "icon"; type: "QUrl"; isReadonly: true }
        Property { name: "stage"; type: "Stage"; isReadonly: true }
        Property { name: "state"; type: "State"; isReadonly: true }
        Property { name: "focused"; type: "bool"; isReadonly: true }
        Property { name: "splashTitle"; type: "string"; isReadonly: true }
        Property { name: "splashImage"; type: "QUrl"; isReadonly: true }
        Property { name: "splashShowHeader"; type: "bool"; isReadonly: true }
        Property { name: "splashColor"; type: "QColor"; isReadonly: true }
        Property { name: "splashColorHeader"; type: "QColor"; isReadonly: true }
        Property { name: "splashColorFooter"; type: "QColor"; isReadonly: true }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "commentChanged"
            Parameter { name: "comment"; type: "string" }
        }
        Signal {
            name: "iconChanged"
            Parameter { name: "icon"; type: "QUrl" }
        }
        Signal {
            name: "stageChanged"
            Parameter { name: "stage"; type: "Stage" }
        }
        Signal {
            name: "stateChanged"
            Parameter { name: "state"; type: "State" }
        }
        Signal {
            name: "focusedChanged"
            Parameter { name: "focused"; type: "bool" }
        }
    }
    Component {
        name: "unity::shell::application::ApplicationManagerInterface"
        prototype: "QAbstractListModel"
        exports: ["Unity.Application/ApplicationManagerInterface 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Roles"
            values: {
                "RoleAppId": 256,
                "RoleName": 257,
                "RoleComment": 258,
                "RoleIcon": 259,
                "RoleStage": 260,
                "RoleState": 261,
                "RoleFocused": 262
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "focusedApplicationId"; type: "string"; isReadonly: true }
        Property { name: "suspended"; type: "bool" }
        Property { name: "forceDashActive"; type: "bool" }
        Signal {
            name: "focusRequested"
            Parameter { name: "appId"; type: "string" }
        }
        Signal {
            name: "applicationAdded"
            Parameter { name: "appId"; type: "string" }
        }
        Signal {
            name: "applicationRemoved"
            Parameter { name: "appId"; type: "string" }
        }
        Method {
            name: "get"
            type: "unity::shell::application::ApplicationInfoInterface*"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "findApplication"
            type: "unity::shell::application::ApplicationInfoInterface*"
            Parameter { name: "appId"; type: "string" }
        }
        Method {
            name: "requestFocusApplication"
            type: "bool"
            Parameter { name: "appId"; type: "string" }
        }
        Method {
            name: "focusApplication"
            type: "bool"
            Parameter { name: "appId"; type: "string" }
        }
        Method { name: "unfocusCurrentApplication" }
        Method {
            name: "startApplication"
            type: "unity::shell::application::ApplicationInfoInterface*"
            Parameter { name: "appId"; type: "string" }
            Parameter { name: "arguments"; type: "QStringList" }
        }
        Method {
            name: "stopApplication"
            type: "bool"
            Parameter { name: "appId"; type: "string" }
        }
    }
}
